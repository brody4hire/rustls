name: rustls

permissions:
  contents: read

on:
  push:
  pull_request:
  merge_group:
  schedule:
    - cron: '0 18 * * *'

jobs:

  coverage:
    name: Measure coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Measure coverage
        run: ./admin/coverage --lcov --output-path final.info

      - name: Report to codecov.io
        uses: codecov/codecov-action@v4
        with:
          file: final.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  minver:
    name: Check minimum versions of direct dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-minimal-versions

      # cargo-minimal-versions requires cargo-hack
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Check direct-minimal-versions
        run: cargo minimal-versions --direct --ignore-private check
        working-directory: rustls/

  cross-build-test:
    name: cross build-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # 32-bit Android targets:
          - armv7-linux-androideabi
          - i686-linux-android
          # standard 32-bit (Linux) target - SKIP bindgen for this target:
          - i686-unknown-linux-gnu
          # exotic target(s):
          - s390x-unknown-linux-gnu
          # additional target(s):
          # NOTE: This could have some overlap with 64-bit ARM-style CPU on macOS CI host;
          # may have similar ARM-style CPU overlap with standard Windows & possibly Linux in the future
          - aarch64-linux-android
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install cross (cross-rs) from GitHub
        run: cargo install cross --git https://github.com/cross-rs/cross
      # XXX TODO ADD name: entry with description for some steps below
      #Â XXX TODO COMBINE TO REMOVE REPEATED if: lines from here
      - run: cargo add --dev --features bindgen aws-lc-sys --package rustls
        if: ${{ matrix.target != 'i686-unknown-linux-gnu' }}
      - run: cargo install bindgen-cli
        if: ${{ matrix.target != 'i686-unknown-linux-gnu' }}
      # NOTE that cargo test will *always* enable the `std` feature
      # XXX TODO: add build step with no `std` feature enabled
      - run: cross test --package rustls --target ${{ matrix.target }}
      # - name: Install golang for aws-lc-fips-sys
      #   uses: actions/setup-go@v5
      #   with:
      #     go-version: "1.23.0"
      - run: sudo apt install golang
      # need to update [dependencies] with bindgen in rustls before build test with aws_lc_rs will work with most cross targets
      - run: cargo add --features bindgen aws-lc-sys --package rustls
        if: ${{ matrix.target != 'i686-unknown-linux-gnu' }}
      # try build with no-std
      - run: cross build --no-default-features --features aws_lc_rs,fips,logging,ring,tls12 --package rustls --target ${{ matrix.target }}
      # NOTE that test is always with std
      - run: cross test --no-default-features --features aws_lc_rs,fips,logging,ring,tls12,std --package rustls --target ${{ matrix.target }}

  semver:
    name: Check semver compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Check formatting (connect-tests workspace)
        run: cargo fmt --all --manifest-path=connect-tests/Cargo.toml -- --check
      - name: Check formatting (fuzz workspace)
        run: cargo fmt --all --manifest-path=fuzz/Cargo.toml -- --check
