#!/bin/bash

# Runs clippy on every package in this repo.
#
# Passes through any extra arguments to each invocation.
#
# Exits non-zero if any clippy invocation exits non-zero,
# but always runs them all.

rc=0
script_args="$@"

# XXX TODO: FIND A BETTER PLACE TO DEFINE STABLE VS UNSTABLE FEATURES IN A SINGLE PLACE
UNSTABLE_FEATURES="critical-section"

function run_clippy() {
  if ! ( set -x ; cargo clippy --locked "$@" $script_args ) ; then
    rc=$PIPESTATUS
  fi
}

# because examples enable rustls' features, `--workspace --no-default-features` is not
# the same as `--package rustls --no-default-features` so run it separately
run_clippy --package rustls --no-default-features --all-targets

# run all workspace members (individually, because we don't want feature unification)
for p in $(admin/all-workspace-members) ; do
  case "$p" in
    bogo)
      # `bogo` is allergic to `--all-features`
      ALL_FEATURES="--features fips"
      ;;
    rustls-bench)
      # rustls-bench with post-quantum cannot co-exist with aws-lc-rs+fips
      ALL_FEATURES=$(admin/all-features-except $UNSTABLE_FEATURES post-quantum rustls-bench)
      ;;
    rustls-provider-test)
      # no features for `rustls-provider-test`, which only has unstable `critical-section` feature (besides default `std` feature)
      ALL_FEATURES=$(admin/all-features-except $UNSTABLE_FEATURES post-quantum rustls-bench)
      ;;
    *)
      # XXX TODO RENAME ALL_FEATURES TO SOMETHING MORE CONSISTENT
      ALL_FEATURES=$(admin/all-features-except $UNSTABLE_FEATURES $p)
      ;;
  esac

  run_clippy --package $p $ALL_FEATURES --all-targets
done

# not part of the workspace
run_clippy --manifest-path=fuzz/Cargo.toml --all-features --all-targets
run_clippy --manifest-path=rustls-post-quantum/Cargo.toml --all-features --all-targets

exit $rc
