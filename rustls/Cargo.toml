[package]
name = "rustls"
version = "0.23.21"
edition = "2021"
rust-version = "1.71"
license = "Apache-2.0 OR ISC OR MIT"
readme = "../README.md"
description = "Rustls is a modern TLS library written in Rust."
homepage = "https://github.com/rustls/rustls"
repository = "https://github.com/rustls/rustls"
categories = ["network-programming", "cryptography"]
autobenches = false
autotests = false
exclude = ["src/testdata", "tests/**"]
build = "build.rs"

[features]
default = ["aws_lc_rs", "logging", "std", "tls12"]

## Enable some more advanced connection support APIs.
std = ["webpki/std", "pki-types/std", "once_cell/std"]

## Makes the rustls crate depend on the [`aws-lc-rs`] crate.
## Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to
## use it as the default `CryptoProvider`, or provide it explicitly
## when making a `ClientConfig` or `ServerConfig`.
##
## Note that aws-lc-rs has additional build-time dependencies like cmake.
## See [the documentation](https://aws.github.io/aws-lc-rs/requirements/index.html) for details.
aws-lc-rs = ["aws_lc_rs"] # Alias because Cargo features commonly use `-`

aws_lc_rs = ["dep:aws-lc-rs", "webpki/aws_lc_rs"]

## Makes the rustls crate depend on the *ring* crate for cryptography.
## Use `rustls::crypto::ring::default_provider().install_default()` to
## use it as the default `CryptoProvider`, or provide it explicitly
## when making a `ClientConfig` or `ServerConfig`.
ring = ["dep:ring", "webpki/ring"]

## Enable support for FIPS140-3-approved cryptography, via the aws-lc-rs crate.
## This feature enables the `aws_lc_rs` feature, which makes the rustls crate depend
## on [aws-lc-rs](https://github.com/aws/aws-lc-rs).  It also changes the default
## for [`ServerConfig::require_ems`] and [`ClientConfig::require_ems`].
##
## See [manual::_06_fips] for more details.
fips = ["aws_lc_rs", "aws-lc-rs?/fips"]

## Disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces
## applications to manually install one, for instance, when using a custom `CryptoProvider`.
custom-provider = []

## Enable support for TLS version 1.2. Note that, due to the additive
## nature of Cargo features and because it is enabled by default, other crates
## in your dependency graph could re-enable it for your application. If you want to disable
## TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config
## builder API.
tls12 = []

## Make the rustls crate depend on the `log` crate.
## rustls outputs interesting protocol-level messages at `trace!` and `debug!` level,
## and protocol-level errors at `warn!` and `error!` level.  The log messages do not
## contain secret key data, and so are safe to archive without affecting session security.
logging = ["log"]

## When building with Rust Nightly, adds support for the unstable
## `std::io::ReadBuf` and related APIs. This reduces costs from initializing
## buffers. Will do nothing on non-Nightly releases.
read_buf = ["rustversion", "std"]

## Uses the `brotli` crate for RFC8879 certificate compression support.
brotli = ["dep:brotli", "dep:brotli-decompressor", "std"]

## Uses the `zlib-rs` crate for RFC8879 certificate compression support.
zlib = ["dep:zlib-rs"]

[build-dependencies]
rustversion = { version = "1.0.6", optional = true }

[dependencies]
aws-lc-rs = { workspace = true, optional = true }
brotli = { workspace = true, optional = true }
brotli-decompressor = { workspace = true, optional = true }
hashbrown = { workspace = true, optional = true }
log = { workspace = true, optional = true }
# only required for no-std
once_cell = { version = "1.16", default-features = false, features = ["alloc", "race"] }
ring = { workspace = true, optional = true }
subtle = { workspace = true }
webpki = { workspace = true }
pki-types = { workspace = true }
zeroize = { workspace = true }
zlib-rs = { workspace = true, optional = true }
# doc utility
document-features = "0.2.10"

[dev-dependencies]
base64 = { workspace = true }
bencher = { workspace = true }
env_logger = { workspace = true }
hex = { workspace = true }
log = { workspace = true }
macro_rules_attribute = { workspace = true }
num-bigint = { workspace = true }
rcgen = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
time = { workspace = true }
webpki-roots = { workspace = true }
x509-parser = { workspace = true }

[[bench]]
name = "benchmarks"
path = "benches/benchmarks.rs"
harness = false
required-features = ["ring"]

[[example]]
name = "test_ca"
path = "examples/internal/test_ca.rs"

[[test]]
name = "api"
path = "tests/runners/api.rs"

[[test]]
name = "api_ffdhe"
path = "tests/runners/api_ffdhe.rs"
required-features = ["tls12"]

[[test]]
name = "bogo"
path = "tests/bogo.rs"

[[test]]
name = "client_cert_verifier"
path = "tests/runners/client_cert_verifier.rs"

[[test]]
name = "ech"
path = "tests/ech.rs"

[[test]]
name = "key_log_file_env"
path = "tests/runners/key_log_file_env.rs"

[[test]]
name = "process_provider"
path = "tests/process_provider.rs"

[[test]]
name = "server_cert_verifier"
path = "tests/runners/server_cert_verifier.rs"

[[test]]
name = "unbuffered"
path = "tests/runners/unbuffered.rs"

[package.metadata.docs.rs]
# all non-default features except fips (cannot build on docs.rs environment)
features = ["read_buf", "ring"]
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.cargo_check_external_types]
allowed_external_types = [
    "rustls_pki_types",
    "rustls_pki_types::*",
]
